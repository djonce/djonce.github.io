<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泽柏</title>
    <description>欢迎来到我的个人站~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 25 Sep 2022 16:03:53 +0800</pubDate>
    <lastBuildDate>Sun, 25 Sep 2022 16:03:53 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>pm2使用教程</title>
        <description>
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;PM2 是 node 进程管理工具，可以利用它来简化很多 node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g pm2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;快速使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pm2 start app.js&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;
&lt;h3 id=&quot;启动&quot;&gt;启动&lt;/h3&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。
-i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目。
--ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;
-n --name：应用的名称。查看应用信息的时候可以用到。
-o --output &amp;lt;path&amp;gt;：标准输出日志文件的路径。
-e --error &amp;lt;path&amp;gt;：错误输出日志文件的路径。
--interpreter &amp;lt;interpreter&amp;gt;：the interpreter pm2 should use for executing app (bash, python...)。比如你用的coffee script来编写应用。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;重启&quot;&gt;重启&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 restart app.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;停止&quot;&gt;停止&lt;/h3&gt;
&lt;p&gt;停止特定的应用。可以先通过pm2 list获取应用的名字（–name指定的）或者进程id。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 stop app_name|app_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果要停止所有应用，可以&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 stop all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;从进程列表删除进程&quot;&gt;从进程列表删除进程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// pm2 delete [appname] | id
pm2 delete app  // 指定进程名删除
pm2 delete 0    // 指定进程id删除
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;删除进程列表中所有进程&quot;&gt;删除进程列表中所有进程&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 delete all
查看进程状态
pm2 list
// 或者
pm2 ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看某个进程的信息&quot;&gt;查看某个进程的信息&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 describe 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;负载均衡&quot;&gt;负载均衡&lt;/h3&gt;
&lt;p&gt;命令如下，表示开启三个进程。如果&lt;strong&gt;-i 0&lt;/strong&gt;，则会根据机器当前核数自动开启尽可能多的进程。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 start app.js -i 3 # 开启三个进程
pm2 start app.js -i max # 根据机器CPU核数，开启对应数目的进程 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;日志查看&quot;&gt;日志查看&lt;/h3&gt;
&lt;p&gt;除了可以打开日志文件查看日志外，还可以通过&lt;strong&gt;pm2 logs&lt;/strong&gt;来查看实时日志。这点对于线上问题排查非常重要。&lt;/p&gt;

&lt;p&gt;比如某个 node 服务突然异常重启了，那么可以通过 pm2 提供的日志工具来查看实时日志，看是不是脚本出错之类导致的异常重启。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;开机自动启动&quot;&gt;开机自动启动&lt;/h3&gt;
&lt;p&gt;可以通过&lt;strong&gt;pm2 startup&lt;/strong&gt;来实现开机自启动。细节可参考。大致流程如下&lt;/p&gt;

&lt;p&gt;通过&lt;strong&gt;pm2 save&lt;/strong&gt;保存当前进程状态。
通过&lt;strong&gt;pm2 startup [platform]&lt;/strong&gt;生成开机自启动的命令。（记得查看控制台输出）
将步骤2生成的命令，粘贴到控制台进行，搞定。&lt;/p&gt;

&lt;h3 id=&quot;监控monitor-查看进程的资源消耗情况&quot;&gt;监控(monitor)-查看进程的资源消耗情况&lt;/h3&gt;

&lt;p&gt;运行如下命令，查看当前通过pm2运行的进程的状态。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 monit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 18 Sep 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/pm2/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/pm2/</guid>
        
        <category>pm2</category>
        
        
      </item>
    
      <item>
        <title>koa-jwt</title>
        <description>
&lt;h2 id=&quot;koa-jwt&quot;&gt;Koa-jwt&lt;/h2&gt;

&lt;h3 id=&quot;什么是jwt&quot;&gt;什么是JWT&lt;/h3&gt;
&lt;p&gt;JWT（JSON Web Token） 是一种方便地实现服务器与客户端安全通讯的规范，是目前最流行的跨域认证解决方案。&lt;/p&gt;

&lt;h3 id=&quot;jwt原理&quot;&gt;JWT原理&lt;/h3&gt;

&lt;p&gt;在介绍 JWT 之前，先来看看如何使用 session 和 cookie 做用户验证，流程一般如下：&lt;/p&gt;

&lt;p&gt;服务器验证客户端发送的用户名和密码后，在当前对话（session）保存用户信息相关数据并返回一个 session_id 给用户，写入用户 cookie。&lt;/p&gt;

&lt;p&gt;之后用户的每次请求都会通过 cookie 将 session_id 传回服务器，服务器收到 session_id，找到之前保存的数据并获得用户信息
上面这种方式，session 数据共享不方便，不好实现跨域服务，如果是服务器集群，需要实现 session 共享才能让每台服务器都能够进行用户验证。&lt;/p&gt;

&lt;p&gt;使用 JWT，服务器认证用户之后，会生成包含一个 JSON 对象信息的 token 返回给用户，如：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;xxx&quot;,
  &quot;role&quot;: &quot;admin&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后客户端请求服务的时候，都要带上该 token 以供服务器做验证。服务器还会为这个 JSON 添加签名以防止用户篡改数据。通过使用 JWT，服务端不再保存 session 数据，更加容易实现扩展。&lt;/p&gt;

&lt;h3 id=&quot;jwt-结构&quot;&gt;JWT 结构&lt;/h3&gt;

&lt;p&gt;JSON Web Tokens 由以点 ( .) 分隔的三部分组成。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Header&lt;/li&gt;
  &lt;li&gt;Payload&lt;/li&gt;
  &lt;li&gt;Signature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, a JWT typically looks like the following.&lt;/p&gt;

&lt;p&gt;xxxxx.yyyyy.zzzzz&lt;/p&gt;

&lt;p&gt;参考： 
https://jwt.io/introduction&lt;/p&gt;

&lt;p&gt;https://www.jianshu.com/p/2552cdf35e66&lt;/p&gt;

&lt;p&gt;https://juejin.cn/post/6881630034260393992&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Sep 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/koa-jwt/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/koa-jwt/</guid>
        
        <category>koa</category>
        
        
      </item>
    
      <item>
        <title>React创建更新的方式</title>
        <description>
&lt;p&gt;&lt;strong&gt;三种更新方式&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;reactdomrenderhydrate&quot;&gt;ReactDOM.render||hydrate&lt;/h2&gt;

&lt;h2 id=&quot;setstate&quot;&gt;setState&lt;/h2&gt;

&lt;h2 id=&quot;forceupdate&quot;&gt;forceUpdate&lt;/h2&gt;
</description>
        <pubDate>Thu, 08 Sep 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/react-create-update/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/react-create-update/</guid>
        
        <category>react</category>
        
        
      </item>
    
      <item>
        <title>vscode前端插件</title>
        <description>
&lt;h2 id=&quot;live-server&quot;&gt;Live server&lt;/h2&gt;
&lt;p&gt;静态服务器&lt;/p&gt;

&lt;h2 id=&quot;rest-client&quot;&gt;REST Client&lt;/h2&gt;

&lt;h2 id=&quot;gitlens&quot;&gt;GitLens&lt;/h2&gt;
&lt;p&gt;git日志增强&lt;/p&gt;

&lt;h2 id=&quot;css-peek&quot;&gt;CSS Peek&lt;/h2&gt;
&lt;p&gt;快捷查看css样式&lt;/p&gt;

&lt;h2 id=&quot;quokkajs&quot;&gt;Quokka.js&lt;/h2&gt;
&lt;p&gt;快捷调试js代码&lt;/p&gt;

&lt;h2 id=&quot;codesnap&quot;&gt;CodeSnap&lt;/h2&gt;
&lt;p&gt;代码截图&lt;/p&gt;

&lt;h2 id=&quot;auto-rename-tag&quot;&gt;Auto Rename tag&lt;/h2&gt;
&lt;p&gt;改标签&lt;/p&gt;

&lt;h2 id=&quot;snippets&quot;&gt;Snippets&lt;/h2&gt;
&lt;p&gt;代码缩写&lt;/p&gt;

&lt;h2 id=&quot;indent-rainbow&quot;&gt;indent-rainbow&lt;/h2&gt;
&lt;p&gt;彩虹缩进，提高辨识&lt;/p&gt;

&lt;h2 id=&quot;vscode-icons&quot;&gt;vscode-icons&lt;/h2&gt;
&lt;p&gt;文件图标&lt;/p&gt;

&lt;h2 id=&quot;prettier&quot;&gt;Prettier&lt;/h2&gt;
&lt;p&gt;文件代码格式化&lt;/p&gt;

&lt;h2 id=&quot;color-highlight&quot;&gt;Color Highlight&lt;/h2&gt;
&lt;p&gt;颜色标识&lt;/p&gt;

&lt;p&gt;设置 Settings -&amp;gt; marker type -&amp;gt; User&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Sep 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/vscode-%E6%8F%92%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/vscode-%E6%8F%92%E4%BB%B6/</guid>
        
        
      </item>
    
      <item>
        <title>css相关工具</title>
        <description>
&lt;h2 id=&quot;cssgrid&quot;&gt;cssgr.id&lt;/h2&gt;
&lt;p&gt;生成布局样式&lt;/p&gt;

&lt;p&gt;地址： https://cssgr.id&lt;/p&gt;

&lt;h2 id=&quot;csslayoutio&quot;&gt;csslayout.io&lt;/h2&gt;

&lt;p&gt;地址： https://csslayout.io&lt;/p&gt;

&lt;h2 id=&quot;loadingio&quot;&gt;loading.io&lt;/h2&gt;
&lt;p&gt;弹性盒生成器&lt;/p&gt;

&lt;p&gt;地址：https://loading.io/flexbox&lt;/p&gt;

&lt;h2 id=&quot;grid-layout&quot;&gt;grid layout&lt;/h2&gt;

&lt;p&gt;地址： https://grid.layoutit.com&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/css-tools/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/css-tools/</guid>
        
        <category>css</category>
        
        
      </item>
    
      <item>
        <title>oprnfire install</title>
        <description>
&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;Dockerhub上提供了映像的自动构建，这是推荐的安装方法。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull nasqueron/openfire:4.7.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者，您可以自己构建图像。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t nasqueron/openfire github.com/nasqueron/docker-openfire
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;快速开始&quot;&gt;快速开始&lt;/h2&gt;
&lt;p&gt;使用以下命令启动 Openfire：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name openfire -d --restart=always \
  --publish 9090:9090 --publish 5222:5222 --publish 7777:7777 \
  --volume /srv/docker/openfire:/var/lib/openfire \
  nasqueron/openfire:4.7.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者，您可以使用示例docker-compose.yml文件来使用Docker Compose启动容器&lt;/p&gt;

&lt;p&gt;将浏览器指向http://localhost:9090并按照设置过程完成安装。HAKK5 的在 10 分钟内构建免费的 Jabber 服务器视频应该可以帮助您进行配置，还可以向您介绍它的一些功能。&lt;/p&gt;

&lt;h2 id=&quot;持久性&quot;&gt;持久性&lt;/h2&gt;
&lt;p&gt;为了让 Openfire 在容器关闭和启动期间保持其状态，您应该在/var/lib/openfire.&lt;/p&gt;

&lt;p&gt;快速启动命令已经安装了一个卷以进行持久化。&lt;/p&gt;

&lt;p&gt;SELinux 用户应该更新主机挂载点的安全上下文，以便它可以很好地与 Docker 配合使用：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /srv/docker/openfire
chcon -Rt svirt_sandbox_file_t /srv/docker/openfire
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java 虚拟机选项
您可以将选项附加到启动命令以配置 JVM：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -name openfire -d \
  [DOCKER_OPTIONS] \
  nasqueron/openfire:4.7.1 \
  -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;日志&quot;&gt;日志&lt;/h2&gt;
&lt;p&gt;要访问位于 的 Openfire 日志，&lt;strong&gt;/var/log/openfire&lt;/strong&gt;您可以使用docker exec. 例如，如果您想跟踪日志：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it openfire tail -f /var/log/openfire/info.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;维护&quot;&gt;维护&lt;/h2&gt;
&lt;h3 id=&quot;升级&quot;&gt;升级&lt;/h3&gt;
&lt;p&gt;要升级到较新版本：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.下载更新的 Docker 镜像：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull nasqueron/openfire:4.7.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.停止当前运行的镜像：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop openfire
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.移除停止的容器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rm -v openfire
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4.开始更新镜像&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -name openfire -d \
  [OPTIONS] \
  nasqueron/openfire:4.7.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;外壳访问&quot;&gt;外壳访问&lt;/h3&gt;
&lt;p&gt;出于调试和维护目的，您可能需要访问容器外壳。如果您使用的是 Docker 版本或更高版本，则可以通过开始使用1.3.0来访问正在运行的容器外壳：bashdocker exec&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it openfire bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 30 Jun 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/06/oprnfire-install/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/06/oprnfire-install/</guid>
        
        
      </item>
    
      <item>
        <title>Calibre电子书管理工具</title>
        <description>
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;Calibre 是一款强大且易用的电子书本地管理工具，可以在 Windows、macOS 和 Linux 平台集中整理各种格式的电子书……&lt;/p&gt;

&lt;p&gt;https://calibre-ebook.com/zh_CN/download&lt;/p&gt;

&lt;h2 id=&quot;搭建私人电子书平台&quot;&gt;搭建私人电子书平台&lt;/h2&gt;

&lt;h3 id=&quot;1下载镜像&quot;&gt;1、下载镜像&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull johngong/calibre-web:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2创建calibre-web容器&quot;&gt;2、创建calibre-web容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker create  \
    --name=calibre-web  \
    -p 8083:8083  \
    -p 8080:8080  \
    -v /配置文件位置:/config  \
    -v /书库:/library  \
    -v /自动添加文件夹:/autoaddbooks  \
    -e UID=1000  \
    -e GID=1000  \
    -e CALIBRE_SERVER_USER=用户名  \
    -e CALIBRE_SERVER_PASSWORD=用户密码 \
    --restart unless-stopped  \
    johngong/calibre-web:latest

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3运行&quot;&gt;3、运行&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start calibre-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4停止&quot;&gt;4、停止&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop calibre-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5删除容器&quot;&gt;5、删除容器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rm calibre-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;6删除镜像&quot;&gt;6、删除镜像&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker image &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;johngong/calibre-web:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考： https://hub.docker.com/r/johngong/calibre-web&lt;/p&gt;

&lt;h2 id=&quot;管理&quot;&gt;管理&lt;/h2&gt;

&lt;h3 id=&quot;上传书籍&quot;&gt;上传书籍&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;上传数据地址在8080端口&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;用户端&quot;&gt;用户端&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;用户端阅读地址在8083端口&lt;/strong&gt;
&lt;strong&gt;默认管理员登录账号admin，密码admin123, 详细见文档&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Jun 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/06/calibre/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/06/calibre/</guid>
        
        
      </item>
    
      <item>
        <title>好用的工具网站</title>
        <description>
&lt;h3 id=&quot;图标网站&quot;&gt;图标网站&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.iconfont.cn/&quot;&gt;Iconfont&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;制作logo网站&quot;&gt;制作logo网站&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.logosc.cn/&quot;&gt;LOGO设计神器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.logomaker.com.cn/&quot;&gt;标智客&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jun 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/06/some-good-dev-tools/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/06/some-good-dev-tools/</guid>
        
        <category>工具</category>
        
        
      </item>
    
      <item>
        <title>微信小程序开发整理</title>
        <description>
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;h3 id=&quot;常用文档链接&quot;&gt;常用文档链接&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/https://developers.weixin.qq.com/miniprogram/dev/framework/&quot;&gt;微信小程序开发文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html&quot;&gt;微信云开发参考文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;小程序注册&quot;&gt;小程序注册&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/wxopen/waregister?action=step1&quot;&gt;微信小程序注册&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;小程序解冻&quot;&gt;小程序解冻&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/cgi-bin/readtemplate?t=forgetpwd/index_tmpl&amp;amp;token=&amp;amp;lang=zh_CN&quot;&gt;微信小程序解冻&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;小程序管理&quot;&gt;小程序管理&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;amp;token=453053744&quot;&gt;微信小程序管理&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;小程序数据分析&quot;&gt;小程序数据分析&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://wedata.weixin.qq.com/mp2/basic-data/core-data?source=3&quot;&gt;微信小程序数据分析-We分析&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jun 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/06/weixin-miniapp-dev/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/06/weixin-miniapp-dev/</guid>
        
        <category>小程序</category>
        
        
      </item>
    
      <item>
        <title>node project package docker images</title>
        <description>
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;h3 id=&quot;node项目&quot;&gt;node项目&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── Dockerfile
├── _eng.traineddata
├── app.js
├── bin
│   └── www
├── chi_sim_vert.traineddata
├── chi_tra.traineddata
├── eng.traineddata
├── osd.traineddata
├── package-lock.json
├── package.json
├── public
│   ├── javascripts
│   ├── stylesheets
│   └── upload
├── routes
│   ├── index.js
│   ├── ocr.js
│   └── upload.js
└── views
    ├── error.pug
    ├── index.pug
    └── layout.pug

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;简单的脚本&quot;&gt;简单的脚本&lt;/h3&gt;
&lt;p&gt;简单将本地已经安装，可以运行的项目&lt;code class=&quot;highlighter-rouge&quot;&gt;直接打包成镜像&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM node:12

RUN &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /usr/ocr/app/

WORKDIR /usr/ocr/app/

COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /usr/ocr/app/

EXPOSE 3000

CMD npm start

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;构建镜像&quot;&gt;构建镜像&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ocr

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;查看镜像构建成功&quot;&gt;查看镜像构建成功&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/docker/node-package-image-1.png&quot; alt=&quot;查看镜像详情&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;启动镜像容器&quot;&gt;启动镜像容器&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ocr &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000:3000 ocr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 15 Jun 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/06/node-project-package-docker-images/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/06/node-project-package-docker-images/</guid>
        
        
      </item>
    
  </channel>
</rss>
